// IMPLEMENTAION OF RING COUNTER

*********** VERILOG CODE *****************
module ring_counter(clk,rst,q);
  input clk,rst;
  output reg [3:0]q;
  
  typedef enum reg [3:0] {
    S0 = 4'b0001,
    S1 = 4'b0010,
    S2 = 4'b0100,
    S3 = 4'b1000
  } state_t;
  
  state_t state;
  always @(posedge clk)begin
    if(rst)
      state<=S0;
    else begin
      case(state)
        S0: state<=S1;
        S1: state<=S2;
        S2: state<=S3;
        S3: state <= S0;
        default: state <= S0;
      endcase
    end
  end
  always @(*)begin
    q<=state;
  end
endmodule

********** TESTBENCH CODE *****************
module testbench();
  reg clk, rst;
  wire [3:0] q;

  ring_counter tb(clk,rst,q);
  initial clk = 0;
  always #5 clk = ~clk;

  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0, testbench);
    $monitor("Time=%0t | rst=%b | out=%b", $time, rst, q);

    rst = 1;
    #10 rst = 0;
    #100 $finish;
  end
endmodule

     
