// code converted

******** verilog code *************
module code_converter(b,g);
  input[3:0]b;
  output reg[3:0]g;
  
  always @(*)begin
    g[3] = b[3];             
    g[2] = b[3] ^ b[2];      
    g[1] = b[2] ^ b[1];
    g[0] = b[1] ^ b[0];
  end
endmodule
    
********* testbench code *************
module testbench();
  reg [3:0]b;
  wire [3:0]g;
  
  code_converter tb(b,g);
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(1,testbench);
    
    $monitor("Binary=%b | Graycode=%b ",b,g);
    
    b=4'b0000;#10
    b=4'b0001;#10
    b=4'b0010;#10
    b=4'b0011;#10
    b=4'b0100;#10
    b=4'b0100;#10
    b=4'b0110;#10
    b=4'b0111;#10
    b=4'b1000;#10
    b=4'b1001;#10
    b=4'b1010;#10
    b=4'b1011;#10
    b=4'b1100;#10
    b=4'b1101;#10
    b=4'b1110;#10
    b=4'b1111;#10
    $finish;
  end
endmodule
    
    
    
